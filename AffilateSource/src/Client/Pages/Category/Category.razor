@page "/categories"
@inject HttpClient Http
@inject PostApiServices postApi
@inject NavigationManager NavigationManager
@using AffilateSource.Client.Services
@using AffilateSource.Shared.Kendohelpers
@using AffilateSource.Shared.ViewModel
@using AffilateSource.Shared.ViewModel.Category
@using System.ComponentModel
@using AffilateSource.Shared.ViewModel.Post
@using System.Text.Json
@using AffilateSource.Shared.ViewModel.Status
@using Telerik.DataSource
@inject NotificationService _notice
<TelerikGrid TItem="@CategoryQuickVM" OnRead=@ReadItems ScrollMode="@GridScrollMode.Scrollable"
             FilterMode="@GridFilterMode.None"
             @ref="@DataSource"
             Pageable="true"
             @bind-PageSize="@PageSize" @bind-Page="@Page">
    @*<GridToolBar>
        <Space>
            <SpaceItem>
                <AntDesign.Button Icon="plus" Size="@ButtonSize.Large" Type="primary" OnClick="@CreateCategory">Thêm mới danh mục</AntDesign.Button>
            </SpaceItem>
        </Space>
    </GridToolBar>*@
    <DetailTemplate>
        @{
            CategoryQuickVM employee = context as CategoryQuickVM;
            <CategoryParent EmployeeId="@employee.Id" />
        }
    </DetailTemplate>
    <GridColumns>
        <GridColumn Field="@(nameof(CategoryQuickVM.Id))" Editable="false" Title="ID" Width="120px">
            <Template>
                @{
                    var product = context as CategoryQuickVM;
                    @product.Id
                    ;
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@(nameof(CategoryQuickVM.CategoryName))" Title="Danh mục" Width="120px" />
        <GridColumn Field="@(nameof(CategoryQuickVM.ParentId))" Title="Chỉnh sửa" Width="120px">
            <Template>
                @{
                    var post = context as CategoryQuickVM;
                    <Button Type="primary" OnClick="@(()=>btnUpdateCategory(post.Id))">
                        Chỉnh sửa
                    </Button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>
<Modal Title="@("Chỉnh sửa danh mục")"
       Visible="@_visibleUpdateCate"
       OnOk="@HandleOkUpdateCate"
       OnCancel="@HandleCancelUpdateCate">
    <Form Loading="loadingUpdate" Model="@modelUpdate"
          OnFinish="OnFinishUpdateCate"
          OnFinishFailed="OnFinishFailedUpdateCate"
          @ref="@_formUpdate">
        <AntDesign.FormItem Label="Tên danh mục">
            <Input @bind-Value="@context.CategoryName" />
        </AntDesign.FormItem>

        <AntDesign.FormItem Label="Thứ tự hiển thị">
            <Input @bind-Value="@context.SortOrder" />
        </AntDesign.FormItem>
        <AntDesign.FormItem>
            <Text>Trạng thái</Text>
            <Select DataSource="@StatusViewModel"
                    @bind-Value="@context.StatusId"
                    LabelName="@nameof(StatusVm.StatusName)"
                    ValueName="@nameof(StatusVm.StatusId)"
                    Placeholder="Chọn trạng thái"
                    AllowClear>
            </Select>
        </AntDesign.FormItem>
    </Form>
</Modal>


@code {
    public List<StatusVm> StatusViewModel { get; set; } = new List<StatusVm>();
    public List<CategoryQuickVM> categoryQuickVM { get; set; }
    TelerikGrid<CategoryQuickVM> DataSource { get; set; }
    public CategoryQuickVM DetailPosts { get; set; }
    GridReadEventArgs args = new GridReadEventArgs();
    int PageSize { get; set; } = 50;
    int Page { get; set; } = 1;
    async Task GetData()
    {
        args.Request.Filters.Clear();
        CompositeFilterDescriptor _filter = new CompositeFilterDescriptor();
        _filter.LogicalOperator = FilterCompositionLogicalOperator.And;

        if (!string.IsNullOrEmpty(filtterRequest.Level))
            _filter.FilterDescriptors.Add(new FilterDescriptor("Level", FilterOperator.IsEqualTo, filtterRequest.Level));
        if (!string.IsNullOrEmpty(filtterRequest.StatusId))
            _filter.FilterDescriptors.Add(new FilterDescriptor("StatusId", FilterOperator.IsEqualTo, filtterRequest.StatusId));
        args.Request.Filters.Add(_filter);
        // Sắp xếp
        args.Request.Sorts.Clear();
        args.Request.Sorts.Add(new SortDescriptor("Id", Telerik.DataSource.ListSortDirection.Ascending));
        args.Request.PageSize = PageSize;
        DataEnvelope<CategoryQuickVM> result = await postApi.GetDataCategoryAdminAsync("Categories", "GetCategoryPagingFilterAdmin", args.Request);

        if (args.Request.Groups.Count > 0)
        {
            var data = GroupDataHelpers.DeserializeGroups<CategoryQuickVM>(result.GroupedData);
            args.Data = data.Cast<object>().ToList();
        }
        else
        {
            args.Data = result.Data.Cast<object>().ToList();
        }
        args.Total = result.Total;
        StateHasChanged();
    }
    protected async Task ReadItems(GridReadEventArgs argsz)
    {
        args = argsz;
        Page = args.Request.Page;
        await GetData();
        //await GetSelectListValue();
    }
    public FilterRequest filtterRequest { get; set; } = new FilterRequest { };
    public class FilterRequest
    {
        public object this[string propertyName]
        {
            get { return this.GetType().GetProperty(propertyName).GetValue(this, null); }
            set { this.GetType().GetProperty(propertyName).SetValue(this, value, null); }
        }
        public string Level { get; set; } = "1";
        public string StatusId { get; set; }
    }

    //update danh mục cha
    #region Update Danh mục cha

    bool _visibleUpdateCate = false;
    bool loadingUpdate = false;
    void toggleUpdate(bool value) => loadingUpdate = value;
    private Form<CategoryQuickVM> _formUpdate;
    private CategoryQuickVM modelUpdate = new CategoryQuickVM();
    async Task<CategoryQuickVM> btnUpdateCategory(int id)
    {
        modelUpdate = await postApi.GetCategoryDetailByIdAdmin("Categories", "GetCategoryDetailById", id);  // get thông tin chi tiết của 1 danh mục
        StatusViewModel = await postApi.GetDataSelectStatus("Status", "GetListSatatus");
        _visibleUpdateCate = true;
        return modelUpdate;
    }

    private void HandleCancelUpdateCate(MouseEventArgs e)
    {
        _visibleUpdateCate = false;
    }
    private void HandleOkUpdateCate(MouseEventArgs e)
    {
        _formUpdate.Submit();
    }
    async Task OnFinishUpdateCate()
    {
        var checkname = await Http.PostAsJsonAsync("/Categories/UpdateCategories", modelUpdate);
        if (checkname.IsSuccessStatusCode)
        {
            await _notice.Open(new NotificationConfig()
                {
                    Message = "Chỉnh sửa danh mục thành công",
                    NotificationType = NotificationType.Success
                });
            //await RefreshThroughState();
            _visibleUpdateCate = false;

        }
        else
        {
            await _notice.Open(new NotificationConfig()
                {
                    Message = "Lỗi",
                    NotificationType = NotificationType.Error
                });
        }
        _visibleUpdateCate = false;
    }
    private void OnFinishFailedUpdateCate(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(modelUpdate)}");
    }
    #endregion Update Danh mục cha

    
}
