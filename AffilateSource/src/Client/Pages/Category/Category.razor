@page "/categories"
@inject HttpClient Http
@inject PostApiServices postApi
@inject NavigationManager NavigationManager


@using AffilateSource.Client.Services
@using AffilateSource.Shared.Kendohelpers
@using AffilateSource.Shared.ViewModel
@using AffilateSource.Shared.ViewModel.Category
@using System.ComponentModel
@using AffilateSource.Shared.ViewModel.Post
@using Telerik.DataSource

<TelerikGrid TItem="@CategoryQuickVM" OnRead=@ReadItems ScrollMode="@GridScrollMode.Scrollable"
             FilterMode="@GridFilterMode.None"
             @ref="@DataSource"
             Pageable="true"
             @bind-PageSize="@PageSize" @bind-Page="@Page">
    <GridColumns>
        @*<GridCheckboxColumn SelectAll="@ShowSelectAll" Width="30px"></GridCheckboxColumn>*@
        <GridColumn Field="@(nameof(CategoryQuickVM.Id))" Editable="false" Title="ID" Width="120px">
            <Template>
                @{
                    var product = context as CategoryQuickVM;
                    @product.Id
                    ;
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@(nameof(CategoryQuickVM.CategoryName))" Title="Danh mục" Width="120px" />
        <GridColumn Field="@(nameof(CategoryQuickVM.ParentId))" Title="Chỉnh sửa" Width="120px">
            <Template>
                @{
                    var post = context as CategoryQuickVM;
                    <AntDesign.Button Type="primary">
                        <a href="/post/update-post/@(post.Id)"> Chỉnh sửa</a>
                    </AntDesign.Button>
                }
            </Template>
        </GridColumn>
    </GridColumns>
    <DetailTemplate>
        @{
            <div>njkdvnj</div>
            //var category = context as categoryQuickVM;
            //<TelerikGrid Data="@categoryQuickVM"
            //         Height="300px"
            //         Pageable="true"
            //         Sortable="true"
            //         PageSize="5">
            //    <GridColumns>
            //        <GridColumn Field=@nameof(CategoryQuickVM.Id) Title="Product ID" />
            //        <GridColumn Field=@nameof(CategoryQuickVM.CategoryName) Title="Product Name" />
            //        <GridColumn Field=@nameof(CategoryQuickVM.ParentId) Title="Unit Price" />
            //    </GridColumns>
            //</TelerikGrid>
        }
    </DetailTemplate>
</TelerikGrid>



@code {
    public List<CategoryQuickVM> categoryQuickVM { get; set; }
    TelerikGrid<CategoryQuickVM> DataSource { get; set; }
    public CategoryQuickVM DetailPosts { get; set; }
    GridReadEventArgs args = new GridReadEventArgs();
    int PageSize { get; set; } = 50;
    int Page { get; set; } = 1;
    async Task GetData()
    {
        args.Request.Filters.Clear();
        CompositeFilterDescriptor _filter = new CompositeFilterDescriptor();
        _filter.LogicalOperator = FilterCompositionLogicalOperator.And;

        //if (!string.IsNullOrEmpty(filtterRequest.CategoryParentId))
        //    _filter.FilterDescriptors.Add(new FilterDescriptor("CategoryParentId", FilterOperator.IsEqualTo, filtterRequest.CategoryParentId));
        //if (!string.IsNullOrEmpty(filtterRequest.StatusId))
        //    _filter.FilterDescriptors.Add(new FilterDescriptor("StatusId", FilterOperator.IsEqualTo, filtterRequest.StatusId));

        //if (!string.IsNullOrEmpty(filtterRequest.NhanVien))
        //    _filter.FilterDescriptors.Add(new FilterDescriptor("MaNhanVien", FilterOperator.IsEqualTo, filtterRequest.NhanVien));
        //if (!string.IsNullOrEmpty(filtterRequest.PhongBan))
        //    _filter.FilterDescriptors.Add(new FilterDescriptor("MaPhongBan", FilterOperator.IsEqualTo, filtterRequest.PhongBan));
        //if (!string.IsNullOrEmpty(filtterRequest.KhuVuc))
        //    _filter.FilterDescriptors.Add(new FilterDescriptor("MaKhuVuc", FilterOperator.IsEqualTo, filtterRequest.KhuVuc));
        args.Request.Filters.Add(_filter);
        // Sắp xếp
        args.Request.Sorts.Clear();
        args.Request.Sorts.Add(new SortDescriptor("Id", Telerik.DataSource.ListSortDirection.Ascending));
        args.Request.PageSize = PageSize;
        DataEnvelope<CategoryQuickVM> result = await postApi.GetDataCategoryAdminAsync("Categories", "GetCategoryPagingFilterAdmin", args.Request);

        if (args.Request.Groups.Count > 0)
        {
            var data = GroupDataHelpers.DeserializeGroups<CategoryQuickVM>(result.GroupedData);
            args.Data = data.Cast<object>().ToList();
        }
        else
        {
            args.Data = result.Data.Cast<object>().ToList();
        }
        args.Total = result.Total;
        StateHasChanged();
    }
    protected async Task ReadItems(GridReadEventArgs argsz)
    {
        args = argsz;
        Page = args.Request.Page;
        await GetData();
        //await GetSelectListValue();
    }
}
